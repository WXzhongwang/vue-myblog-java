<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.ssm.dao.ArticleDao">
    <insert id="addArticle" parameterType="com.ssm.domain.Article">
        INSERT INTO Article (
   			ID,
   			Title,
   			Content,
   			Thumbnail,
			PublishTime,
			IsHot,
			VisitRecordCount,
			ThumpUpCount,
			CreateBy,
			CreateTime,
			ModifiedBy,
			ModifiedTime
		) VALUES (
			#{ID},
   			#{Title},
   			#{Thumbnail},
   			#{PublishTime},
			#{IsHot},
			#{VisitRecordCount},
			#{ThumpUpCount},
			#{CreateBy},
			#{CreateTime},
			#{ModifiedBy},
			#{ModifiedTime}
		)
    </insert>
	
    <select id="getArticle" parameterType="int" resultType="com.ssm.domain.Article">
        select * from article where id = #{id}
    </select>
    
    <update id="updateArticle" parameterType="com.ssm.domain.Article">
        update article set 
        Title = #{Title},
        Thumbnail=#{Thumbnail},
        PublishTime=#{PublishTime},
        IsHot=#{IsHot},
        VisitRecordCount=#{VisitRecordCount},
		ThumpUpCount=#{ThumpUpCount},
        CreateBy=#{CreateBy},
        CreateTime=#{CreateTime},
        ModifiedBy=#{ModifiedBy},
        ModifiedTime=#{ModifiedTime}
        where id=#{id}
    </update>
    
    <delete id="deleteArticle" parameterType="int">
        delete from article where id=#{id}
    </delete>
    
    <select id="getAll" resultType="com.ssm.domain.Article">
        select * from article
        <where>
        <if test="IsHot !=null and IsHot != ''">
         and   IsHot=#{IsHot}  
        </if>
         <if test="CategoryID !=null and CategoryID != ''">
         and   CategoryID=#{CategoryID}  
        </if>
        </where>
        order by CreateTime desc
    </select>
    
    <select id="getHotArticles" resultType="com.ssm.domain.Article">
        select  * from article
        where IsHot = 1
        order by CreateTime desc limit 10
    </select>
    
    <select id="getSideBar" resultType="java.util.HashMap">
        select a.articles, b.tags, c.categories from 
			(select count(1) as articles from article) as a,
			(select count(1) as tags from tag) as b,
			(select count(1)  as categories from category where ParentCategoryID != null) as c       
    </select>
</mapper>